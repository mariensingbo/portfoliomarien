
import * as dat from '../../../../shared/src/three/dat.gui.module.js';
import { OrbitControls } from 'src/three/OrbitControls.js';
import * as THREE from 'src/three/three.module.js';
import { RGBAFormat } from 'three';
import gsap from 'src/gsap-core.js'
import { findIndex } from 'lodash';

const vertexShader = `
  uniform float uTime;
  varying vec2 vUv;

  void main() {
    vUv = uv;

    float displacementY = cos(position.y * 0.5 + uTime) * 0.05;
    float displacementZ = sin(position.y * 0.5 + uTime) * 0.05;

    vec3 newPosition = position + vec3(0.0, normal.y * displacementY, normal.z * displacementZ);
    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
  }
`;

const fragmentShader = `
  uniform sampler2D uTexture;
  uniform float uOpacity;
  varying vec2 vUv;

  void main() {
    vec4 texture = texture2D(uTexture, vUv);
    gl_FragColor = vec4(texture.rgb, texture.a * uOpacity);
  }
`;



class Sketch {
  constructor(options) {
    this.elems = options.dom
    this.pairedMeshes = [];
    this.groups = [];
    this.userData=[]
    this.scene = new THREE.Scene();
    this.container = options.dom;
    this.width = this.container.offsetWidth;
    this.height = this.container.offsetHeight;
    this.renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true,
    });
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setSize(this.width, this.height);
    this.renderer.physicallyCorrectLights = true;
    this.renderer.outputEncoding = THREE.sRGBEncoding;

    this.container.appendChild(this.renderer.domElement);

    this.camera = new THREE.PerspectiveCamera(
      70,
      window.innerWidth / window.innerHeight,
      0.001,
      1000
    );

    this.camera.position.set(0, 0, 2);
    this.controls = new OrbitControls(this.camera, this.renderer.domElement);
    let wrap = document.getElementById('wrap')

    this.time = 0;
    this.isPlaying = true;
    this.groups = [];

    this.materials = [];
    this.meshes = [];
    this.handleImages();
    this.handleResponsiveness();
    this.resize();
    this.render();
    this.setupResize();
  }


  handleImages() {
    const loader = new THREE.TextureLoader();

    const imageTextures = [];
    const videoElements = [];
    const videoTextures = [];

    for (let i = 0; i < 5; i++) {
      imageTextures.push(loader.load(`../img/${i}.jpg`));

      const video = document.createElement('video');
      video.src = `../img/${i}.mp4`;
      video.load();
      video.loop = true;
      video.muted = true;
      videoElements.push(video);


      const texture = new THREE.VideoTexture(video);
      texture.minFilter = THREE.LinearFilter;
      texture.magFilter = THREE.LinearFilter;
      texture.format = THREE.RGBAFormat;
      videoTextures.push(texture);
    }


    let group = new THREE.Group();
    const geometry = new THREE.PlaneGeometry(1.5, 1, 20, 20);



    for (let i = 0; i < 5; i++) {
      const shaderMaterial = new THREE.ShaderMaterial({
        vertexShader: vertexShader,
        fragmentShader: fragmentShader,
        uniforms: {
          uTexture: { value: imageTextures[i] },
          uTime: { value: 0 },
        },
      });

      const materials = [
        new THREE.ShaderMaterial({
          uniforms: {
            uTexture: { value: imageTextures[i] },
            uOpacity: { value: 1.0 },
            uTime: { value: 0.0 },
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          transparent: true,
        }),
        new THREE.ShaderMaterial({
          uniforms: {
            uTexture: { value: videoTextures[i] },
            uOpacity: { value: 0.0 },
            uTime: { value: 0.0 },
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          transparent: true,
        }),
      ];


      const mesh = new THREE.Mesh(geometry, materials[0]);
      mesh.userData = {
        materials,
        video: videoElements[i],
      };

      this.groups.push(group);
      group.add(mesh);
      this.pairedMeshes.push(mesh);
      this.userData.push(mesh.userData);
      this.scene.add(mesh);
      this.scene.add(group);

      if (window.innerWidth <= 768) {
        // For mobile
        mesh.position.x = i * 1.2;
        mesh.position.y = 0;
      }
    }
  }



  setupResize() {
    window.addEventListener("resize", this.resize.bind(this));
  }

  resize() {
    this.width = this.container.offsetWidth;
    this.height = this.container.offsetHeight;
    this.renderer.setSize(this.width, this.height);
    this.camera.aspect = this.width / this.height;
    this.camera.updateProjectionMatrix();
    this.handleResponsiveness();
  }

  stop() {
    this.isPlaying = false;
  }

  play() {
    if (!this.isPlaying) {
      this.render();
      this.isPlaying = true;
    }
  }

  render() {
    if (!this.isPlaying) return;
    this.time += 0.01;

    // Update the uTime uniform value in each material
    this.materials.forEach(mat => {
      mat.uniforms.uTime.value = this.time;
    });

    requestAnimationFrame(this.render.bind(this));
    this.renderer.render(this.scene, this.camera);
  }

  handleResponsiveness() {
    const width = window.innerWidth;

    if (width <= 768) {
      // Mobile devices
      this.camera.position.set(0, -0.7, 2.5); // Adjust the camera distance and position for better visibility
    } else {
      // Desktop devices
      this.camera.position.set(0, 0, 2); // Default camera distance
    }
  }


  dispose() {
    // Dispose materials and geometries
    this.materials.forEach((mat) => mat.dispose());
    this.meshes.forEach((mesh) => {
      mesh.geometry.dispose();
    });

    // Dispose renderer and remove the canvas
    this.renderer.dispose();
    this.container.removeChild(this.renderer.domElement);
  }
}

export default Sketch;
